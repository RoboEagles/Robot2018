// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4579.Robot2018;

import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import flowSensor.FlowMotion;

import org.usfirst.frc4579.Robot2018.commands.*;
import org.usfirst.frc4579.Robot2018.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

	// Variable for storing the data that tells the robot configuration
    public static final char gameData = 0;
    
	Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static driveTrain driveTrain;
    public static gripper gripper;
    public static measurement measurement;
    public static lifter lifter;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new driveTrain();
        gripper = new gripper();
        measurement = new measurement();
        lifter = new lifter();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        chooser.addObject("sideAuto", new sideAuto());
        chooser.addObject("centerAuto", new centerAuto());
        chooser.addDefault("autonomous", new autonomous());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        SmartDashboard.putData("Auto mode", chooser);
        
//        // Creating a camera and setting resolution
//        UsbCamera camera = CameraServer.getInstance().startAutomaticCapture();
//        camera.setResolution(426, 240);
//        
    }
    

    /**
     * This function is called when the disabled button is hit.ff
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){
    	//Robot.lifter.toStart();
    	Robot.lifter.resetCounter();
    	Robot.measurement.reset();
    	Robot.measurement.resetFlowMotion();
    	Robot.gripper.reset();
    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        autonomousCommand = chooser.getSelected();
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
        
        // Gets the game data needed for the autonomous period
        final char gameData = DriverStation.getInstance().getGameSpecificMessage().charAt(0);
        
        // Stores what the robot configuration is during autonomous
    	boolean inCenter = false;
    	boolean inSide = false;
    	
    	// Checks whether to run the code for the center or side configurations
    	DigitalInput centerSwitch = new DigitalInput(1);
    	DigitalInput sideSwitch = new DigitalInput(2);
    	
    	/*if(RobotMap.switchescenterSwitch.get()) {
    		inCenter = true;
    	}
    	else if(RobotMap.switchesleftSwitch.get() || RobotMap.switchesrightSwitch.get()){
    		inSide = true;
    	}*/
    	
    	// Edits the direction according to what switch we are going for
    	if (Robot.gameData == 'L') {
    		int direction = 1;
    	}
    	else {
    		int direction = -1;
    	}
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        Robot.lifter.updateHeight();
        SmartDashboard.putNumber("Height: ",Robot.lifter.getCounts());
    }
}
