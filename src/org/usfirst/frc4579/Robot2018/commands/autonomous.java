// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4579.Robot2018.commands;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.CommandGroup;

import org.usfirst.frc4579.Robot2018.Robot;
import org.usfirst.frc4579.Robot2018.subsystems.*;

/**
 *
 */
public class autonomous extends CommandGroup {

	// Checks whether to run the code for the center or side configurations
	DigitalInput centerSwitch = new DigitalInput(1);
	DigitalInput sideSwitch = new DigitalInput(2);
	
	public int direction;

	public int[] autoDirections = {600,200};
	public double[] autoAngles = {90,180};

	// Gets the game data needed for the autonomous period
    final char gameData = DriverStation.getInstance().getGameSpecificMessage().charAt(0);
    
    // Stores what the robot configuration is during autonomous
	boolean inCenter = false;
	boolean inSide = false;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    public autonomous() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
        // Add Commands here:
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.
    	if(centerSwitch.get()) {
    		inCenter = true;
    	}
    	else if(sideSwitch.get()){
    		inSide = true;
    	}
    	
    	// Edits the direction according to what switch we are going for
    	if (Robot.gameData == 'L') {
    		direction = 1;
    	}
    	else {
    		direction = -1;
    	}
        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.
        // Gets the game data needed for the autonomous period
        //final char gameData = DriverStation.getInstance().getGameSpecificMessage().charAt(0);
        
        // Stores what the robot configuration is during autonomous
    	boolean inCenter = false;
    	boolean inSide = false;
    	
    	// Checks whether to run the code for the center or side configurations
    	DigitalInput centerSwitch = new DigitalInput(1);
    	DigitalInput sideSwitch = new DigitalInput(2);
    	
    	if(centerSwitch.get()) {
    		inCenter = true;
    	}
    	else if(sideSwitch.get()){
    		inSide = true;
    	}
    	
        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
    	if(inSide){
    		addParallel(new centerAuto());
        }
    	else{
    		addParallel(new sideAuto());
    	}
    	//addSequential(new calibrate());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
 
    } 
}
