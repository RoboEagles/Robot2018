// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4579.Robot2018.subsystems;

import org.usfirst.frc4579.Robot2018.RobotMap;
import org.usfirst.frc4579.Robot2018.commands.*;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class gripper extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController rightGripper = RobotMap.gripperrightGripper;
    private final SpeedController leftGripper = RobotMap.gripperleftGripper;
    private final SpeedController movementMotor = RobotMap.grippermovementMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    
    boolean firstOpen = true;
    boolean holding = true;
    
    //----------------- Methods for the Movement Motor -----------------------//
  
    // Opens the gripper
    public void openGripper(){
    	movementMotor.set(-.75);   //JGH probably need to increase this to account for stiffer springs.
    }
    
    // Closes the gripper
    public void closeGripper(){
    	movementMotor.set(.75);
    }
    
    // Stops the movement motor
    public void stopMovement(){
    	movementMotor.set(0);
    }
    
    
    //-------------------Methods for the Left Motor -----------------------//
    public void spinLeft(double speed){ 
    	// Runs the left motor in one direction
    	leftGripper.set(speed * -1.0);
    }
    
    public void stopLeft(){
    	// This stops the left gripper motor
    	leftGripper.stopMotor();
    }
    
    
    
    //------------------ Methods for the Right Motor ---------------------//
    public void spinRight(double speed){
    	// Runs the right motor in one direction
    	rightGripper.set(speed);
    }
    
    public void stopRight(){
    	// This stops the right gripper motor
    	rightGripper.stopMotor();
    }
    
    //------------------ Methods for Ejecting the Cube --------------------//
    public void eject(double speed){
    	// Runs both motors in the other direction
    	rightGripper.set(speed * -1.0);
    	leftGripper.set(speed);
    }
    
    //------------------ Reset Method --------------------------//
    
    public void reset(){     //JGH  this probably is no longer needed.  The whole concept of a first open versus second open is not needed.
    	holding = false;
    	closeGripper();
    	Timer.delay(2);
    	stopMovement();
    }
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    	//setDefaultCommand(new holdCube());
    	
    }
}

